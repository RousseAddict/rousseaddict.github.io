---
import BaseLayout from '../../layouts/BaseLayout.astro';
import PostCard from '../../components/PostCard.astro';

export async function getStaticPaths() {
  const posts = await Astro.glob('../../content/blog/*.md');
  
  // Get all unique tags
  const allTags = new Set<string>();
  posts.forEach((post) => {
    post.frontmatter.tags?.forEach((tag: string) => allTags.add(tag));
  });
  
  // Create a path for each tag
  return Array.from(allTags).map((tag) => {
    const filteredPosts = posts.filter((post) => 
      post.frontmatter.tags?.includes(tag)
    );
    
    return {
      params: { tag },
      props: { posts: filteredPosts, tag }
    };
  });
}

const { posts, tag } = Astro.props;

// Sort posts by date and calculate reading time
const sortedPosts = posts
  .map((post: any) => ({
    ...post,
    readingTime: calculateReadingTime(post.compiledContent())
  }))
  .sort((a: any, b: any) => 
    new Date(b.frontmatter.pubDate).getTime() - new Date(a.frontmatter.pubDate).getTime()
  );

function calculateReadingTime(content: string): string {
  const wordsPerMinute = 200;
  const words = content.trim().split(/\s+/).length;
  const minutes = Math.ceil(words / wordsPerMinute);
  return `${minutes} min read`;
}
---

<BaseLayout 
  title={`Posts tagged "${tag}"`}
  description={`All posts tagged with ${tag}`}
>
  <h1>Posts tagged "{tag}"</h1>
  
  <p style="color: var(--color-text-light); margin-bottom: 2rem;">
    {sortedPosts.length} {sortedPosts.length === 1 ? 'post' : 'posts'}
  </p>
  
  {sortedPosts.map((post: any) => (
    <PostCard
      title={post.frontmatter.title}
      description={post.frontmatter.description}
      pubDate={new Date(post.frontmatter.pubDate)}
      slug={post.frontmatter.slug}
      tags={post.frontmatter.tags}
      readingTime={post.readingTime}
    />
  ))}
  
  <div style="margin-top: 2rem;">
    <a href="/">‚Üê Back to all posts</a>
  </div>
</BaseLayout>